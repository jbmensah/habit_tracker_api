from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework import status, generics
from rest_framework.decorators import api_view, APIView
from .models import Habit
from .serializers import HabitSerializer
from django.shortcuts import get_object_or_404


# Create your views here.
@api_view(http_method_names=["GET", "POST"])
def homepage(request:Request):

	if request.method == "POST":
		data = request.data

		response = {"message": "Hello, World!", "data":data}
		return Response(data=response, status=status.HTTP_201_CREATED)

	response = {"message": "Hello, World!"}
	return Response(data=response, status=status.HTTP_200_OK)


class HabitListCreateView(APIView):
	"""
	A view for creating and listing Habits
	"""
	serializer_class = HabitSerializer

	def get(self, request:Request, *args, **kwargs):
		habits = Habit.objects.all()
		serializer = HabitSerializer(instance=habits, many=True)
		return Response(data=serializer.data, status=status.HTTP_200_OK)

	def post(self, request:Request, *args, **kwargs):
		data = request.data
		serializer = HabitSerializer(data=data)

		if serializer.is_valid():
			serializer.save()

			response = {
				"message": "Habit created successfully.",
			  	"data":serializer.data
			   }
			return Response(data=response, status=status.HTTP_201_CREATED)
		
		return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class HabitRetrieveUpdateDestroyView(APIView):
	"""
	A view for retrieving, updating, and deleting Habits
	"""
	serializer_class = HabitSerializer

	def get(self, request:Request, habit_id:int):
		habit = get_object_or_404(Habit, pk=habit_id)
		serializer = self.serializer_class(instance=habit)

		return Response(data=serializer.data, status=status.HTTP_200_OK)

	def put(self, request:Request, habit_id:int):
		# data = request.data
		habit = get_object_or_404(Habit, pk=habit_id)

		data = request.data

		serializer = self.serializer_class(instance=habit, data=data)

		if serializer.is_valid():
			serializer.save()

			response = {
				"message": "Habit updated successfully.",
			  	"data":serializer.data
			   }
			return Response(data=response, status=status.HTTP_200_OK)

		return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)

	def delete(self, request:Request, habit_id:int, *args, **kwargs):
		habit = get_object_or_404(Habit, pk=habit_id)
		habit.delete()
		return Response(status=status.HTTP_204_NO_CONTENT)